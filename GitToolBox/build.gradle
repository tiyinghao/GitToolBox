buildscript {
    repositories {
        maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
        mavenCentral()
    }
    dependencies {
        classpath "org.junit.platform:junit-platform-gradle-plugin:1.0.0"
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.2.17"
}

repositories {
    mavenCentral()
}

apply plugin: 'org.jetbrains.intellij'
apply plugin: "java"
apply plugin: 'org.junit.platform.gradle.plugin'

sourceCompatibility = javaVersion
targetCompatibility = javaVersion


intellij {
    version ideaVersion
    type ideaType
    plugins 'git4idea'
    updateSinceUntilBuild false
    downloadSources true
    plugins = ['Git4Idea', 'gr.jchrist.gitextender:0.4.0']
}

apply plugin: 'idea'
idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
    }
}

version = "${version}"

junitPlatform {
    filters {
        engines {
            // include 'junit-jupiter', 'junit-vintage'
            // exclude 'custom-engine'
        }
        tags {
            // include 'fast'
            // exclude 'slow'
        }
        // includeClassNamePattern '.*Test'
    }
    // enableStandardTestTask true
    // reportsDir file('build/test-results/junit-platform') // this is the default
    // logManager 'org.apache.logging.log4j.jul.LogManager'
}

dependencies {
    compile("org.jodd:jodd-core:${joddVersion}")
    compile("com.google.guava:guava:${guavaVersion}")

    testCompile("org.mockito:mockito-core:${mockitoVersion}")
    // JUnit 5
    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testCompile("org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
    // Only needed to run tests in an IntelliJ IDEA that bundles an older version
    // testRuntime("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")
    // testRuntime("org.junit.vintage:junit-vintage-engine:${junitVintageEngineVersion}")
}
